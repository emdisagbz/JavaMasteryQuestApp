@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
}
<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<title>Advanced Java World 2 Games</title>
	<link rel="stylesheet" href="~/css/custom/AW2P1F2GamesStyle.css">
</head>
<body>
	<div class="land"></div>
	<button id="bookModule">
		<img src="~/image/Custom/bookModule.png" class="book-image">
	</button>
	<button id="startButton">ADVANCE</button>
	<button id="backButton">Floor 2</button>
	<div id="slidingDiv" class="hidden">
		<h1>MODULE 1</h1>
		<div id="moduleContent">
		</div>
	</div>

	<div class="IceQueen-walk"></div>
	<div class="IceQueen-idle"></div>
	<div class="IceQueen-attack"></div>
	<div class="Slime-walk0"></div>
	<div class="Slime-walk1"></div>
	<div class="Slime-walk2"></div>
	<div class="Slime-walk3"></div>
	<div class="Slime-walk4"></div>
	<div class="Slime-walk5"></div>
	<div class="Slime-walk6"></div>
	<div class="Slime-walk7"></div>
	<div class="Slime-walk8"></div>
	<div class="Slime-walk9"></div>
	<div class="Slime-walk10"></div>
	<div class="Slime-walk11"></div>
	<div class="Slime-walk12"></div>
	<div class="Slime-walk13"></div>



	<div class="warning-screen" id="warningScreen">
		<h2>Ice Queen Appeared</h2>
		<h3>Basic Level 1 Boss</h3>
		<div class="glitters"></div>
	</div>

	<div id="popupContainer" class="popup-container"></div>

	<!-- Lost Popup -->
	<div id="lostPopup" class="popup hidden">
		<p>You Lost</p>
		<button id="restartButton">Restart</button>
		<button id="finishButton">Exit</button>
	</div>

	<!-- Finish Confirmation Popup -->
	<div id="finishPopup" class="popup hidden">
		<p>Are you sure you want to finish?</p>
		<button id="confirmFinishButton">Yes</button>
		<button id="cancelFinishButton">No</button>
	</div>


	<div class="coins-container">
		<div class="coin">
			<img src="gold.png" alt="Gold Coin" class="coin-image">
			<div class="coin-count" id="goldCountContainer">
				<span id="goldCount">0</span>
			</div>
		</div>
		<div class="coin">
			<img src="silver.png" alt="Silver Coin" class="coin-image">
			<div class="coin-count" id="silverCountContainer">
				<span id="silverCount">0</span>
			</div>
		</div>
		<div class="point-box">Points: <span id="pointCount">0</span></div>
	</div>

	<div id="gameContainer" class="hidden">
		<div id="questionContainer">
			<p id="question"></p>
			<div id="choices"></div>
			<div id="imageContainer"></div>
			<input type="text" id="answer" class="answer-input">
			<textarea id="answerTextarea" class="answer-input"></textarea>

			<button id="submitAnswer">Submit</button>
		</div>
		<button id="hintButton" class="hint">?</button>
		<div id="heartsContainer"></div>
	</div>



	<div id="completionWarning" class="completion-warning hidden">
		<div class="glitters"></div>
	</div>
	<iframe id="preloadIframe" src="~/ADVANCED/A_Module4.pdf" style="display:none;"></iframe>
	<button id="goButton" class="hidden">Go</button>

	<div id="timerContainer">
		<div id="timerCircle">
			<div id="timerText">10:00</div>
			<svg>
				<circle cx="50%" cy="50%" r="45"></circle>
			</svg>
		</div>
	</div>

	<!--<script src="~/js/custom/AW2P1F2GamesScript.js"></script>-->
	<script>
            document.addEventListener("DOMContentLoaded", function () {
            const startButton = document.getElementById("startButton");
            const goButton = document.getElementById("goButton");
            const backButton = document.getElementById("backButton");
            const gameContainer = document.getElementById("gameContainer");
            const questionContainer = document.getElementById("questionContainer");
            const submitAnswerButton = document.getElementById("submitAnswer");
            const goldCount = document.getElementById("goldCount");
            const silverCount = document.getElementById("silverCount");
            const pointCount = document.getElementById("pointCount"); // Element to display points
            const warningScreen = document.getElementById("warningScreen");
            const completionWarning = document.getElementById("completionWarning");
            const IceQueenWalk = document.querySelector(".IceQueen-walk");
            const IceQueenIdle = document.querySelector(".IceQueen-idle");
            const IceQueenAttack = document.querySelector(".IceQueen-attack");
            const SlimeWalk0 = document.querySelector(".Slime-walk0");
            const SlimeWalk1 = document.querySelector(".Slime-walk1");
            const SlimeWalk2 = document.querySelector(".Slime-walk2");
            const SlimeWalk3 = document.querySelector(".Slime-walk3");
            const SlimeWalk4 = document.querySelector(".Slime-walk4");
            const SlimeWalk5 = document.querySelector(".Slime-walk5");
            const SlimeWalk6 = document.querySelector(".Slime-walk6");
            const SlimeWalk7 = document.querySelector(".Slime-walk7");
            const SlimeWalk8 = document.querySelector(".Slime-walk8");
            const SlimeWalk9 = document.querySelector(".Slime-walk9");
            const SlimeWalk10 = document.querySelector(".Slime-walk10");
            const SlimeWalk11 = document.querySelector(".Slime-walk11");
            const SlimeWalk12 = document.querySelector(".Slime-walk12");
            const SlimeWalk13 = document.querySelector(".Slime-walk13");
            const popupContainer = document.getElementById("popupContainer");
            const heartsContainer = document.getElementById("heartsContainer");
            const hintButton = document.getElementById("hintButton");
            const lostPopup = document.getElementById("lostPopup");
            const restartButton = document.getElementById("restartButton");

            const finishButton = document.getElementById("finishButton");
            const finishPopup = document.getElementById("finishPopup");
            const confirmFinishButton = document.getElementById("confirmFinishButton");
            const cancelFinishButton = document.getElementById("cancelFinishButton");

            const GRangerWalk = document.querySelector(".GRanger-walk");
            const GRangerIdle = document.querySelector(".GRanger-idle");
            const GRangerAttack = document.querySelector(".GRanger-attack");

            let currentQuestionIndex = 0;
            let silverCoins = localStorage.getItem("silverCoins") ? parseInt(localStorage.getItem("silverCoins")) : 0;
            let goldCoins = localStorage.getItem("goldCoins") ? parseInt(localStorage.getItem("goldCoins")) : 0;
            let points = localStorage.getItem("points") ? parseInt(localStorage.getItem("points")) : 0; // Initialize points
            let startButtonClicks = 0; // Initialize click counter
            let remainingAttempts = 3; // Initialize attempts
            let currentHintIndex = 0; // Track the current hint index
            let totalHeartsLost = 0; // Initialize total hearts lost
            let totalAttempts = 0; // Initialize total attempts
            let AW2F1totalScore = points; // Initialize total score


            updateCoinAndPointCount();
            updateHearts(); // Initialize hearts display
            // Initially display the idle animation BEFORE QUESTIONS
            GRangerIdle.style.visibility = "visible";
            GRangerIdle.style.opacity = "1";

            const questions = [
                {
                    type: "Multiple Choice",
                    points: 2,
                    question: "What does the static keyword indicate in a method?",
                    choices: [
                        "A) The method cannot be accessed.",
                        "B) The method belongs to the class, not instances of the class.",
                        "C) The method returns nothing.",
                        "D) The method can only be accessed by objects."
                    ],
                    answer: "B",
                    hints: [
                        "Hint 1: This type of method can be called without creating an object of the class.",
                        "Hint 2: It is often used for utility or helper methods.",
                        "Hint 3: Static methods belong to the class itself, not to any specific instance."
                    ]
                },
                {
                    type: "Multiple Choice",
                    points: 2,
                    question: "How do you call a static method in Java?",
                    choices: [
                        "A) By creating an object of the class.",
                        "B) Using the class name followed by the method name.",
                        "C) Using the new keyword.",
                        "D) Using the method name directly."
                    ],
                    answer: "B",
                    hints: [
                        "Hint 1: You don't need an instance of the class.",
                        "Hint 2: The method is directly associated with the class, not an object.",
                        "Hint 3: The syntax involves the class name followed by a dot and the method name."
                    ]
                },
                {
                    type: "Multiple Choice",
                    points: 2,
                    question: "What is the main difference between static and instance methods?",
                    choices: [
                        "A) Static methods can only be called once.",
                        "B) Static methods belong to the class while instance methods belong to objects.",
                        "C) Static methods cannot return values.",
                        "D) Instance methods cannot have parameters."
                    ],
                    answer: "B",
                    hints: [
                        "Hint 1: Instance methods need an object of the class to be called.",
                        "Hint 2: Static methods are class-level methods and do not require an instance.",
                        "Hint 3: Instance methods operate on the data that belongs to a particular instance."
                    ]
                },
                {
                    type: "Identification",
                    points: 3,
                    question: "A method that belongs to the class rather than instances of the class.",
                    answer: "Static method",
                    hints: [
                        "Hint 1: It is defined using the static keyword.",
                        "Hint 2: It can be called without creating an object.",
                        "Hint 3: It is often used for operations related to the class itself."
                    ]
                },
                {
                    type: "Identification",
                    points: 3,
                    question: "The keyword used to define a method that belongs to the class.",
                    answer: "static",
                    hints: [
                        "Hint 1: It precedes the return type in the method declaration.",
                        "Hint 2: It indicates that the method is class-level and can be called without an object.",
                        "Hint 3: This keyword is also used to declare class-level variables."
                    ]
                },
                {
                    type: "Identification",
                    points: 3,
                    question: "A method that must be accessed using the class name rather than an object.",
                    answer: "Static method",
                    hints: [
                        "Hint 1: These methods are part of the class, not tied to any specific instance.",
                        "Hint 2: They can be invoked using the class name.",
                        "Hint 3: You do not need to create an instance of the class to call this method."
                    ]
                }
                {
                    type: "Whats the Output",
                    points: 3,
                    question: "Whats the Output of the Code snippet below?",
                    answer: "Hello, static method!",
                    image: "/image/Custom/AW2P1F1WTO1.png"
                },
                {
                    type: "Whats the Output",
                    points: 3,
                    question: "Whats the Output of the Code snippet below?",
                    answer: "8",
                    image: "/image/Custom/AW2P1F1WTO2.png"
                },
                {
                    type: "Whats the Output",
                    points: 3,
                    question: "Whats the Output of the Code snippet below?",
                    answer: "37.0",
                    image: "/image/Custom/AW2P1F1WTO3.png"
                },
                {
                    type: "Whats the Output",
                    points: 3,
                    question: "Whats the Output of the Code snippet below?",
                    answer: "78.53981633974483",
                    image: "/image/Custom/AW2P1F1WTO4.png"
                },
                {
                    type: "Complete the Code",
                    points: 4,
                    question: "Supply whats missing the code snippet below",
                    answer: "greet",
                    image: "/image/Custom/AW2P1F1CTC1.png"
                },
                {
                    type: "Complete the Code",
                    points: 4,
                    question: "Supply whats missing the code snippet below",
                    answer: "int",
                    image: "/image/Custom/AW2P1F1CTC2.png"
                },
                {
                    type: "Complete the Code",
                    points: 4,
                    question: "Supply whats missing the code snippet below",
                    answer: "32",
                    image: "/image/Custom/AW2P1F1CTC3.png"
                },
                {
                    type: "Complete the Code",
                    points: 4,
                    question: "Supply whats missing the code snippet below",
                    answer: "print",
                    image: "/image/Custom/AW2P1F1CTC4.png"
                }
            ];
            function stopTimer() {
                clearInterval(timer);
            }

            let timer; // Holds the timer reference
            let timeLeft = 600; // 5 minutes = 300 seconds
            let timerStarted = false; // Track if the timer has started
            const circle = document.querySelector("#timerCircle svg circle");
            const radius = circle.r.baseVal.value;
            const circumference = 2 * Math.PI * radius;

            circle.style.strokeDasharray = circumference;
            circle.style.strokeDashoffset = 0;

            function startTimer() {
                timer = setInterval(function () {
                    timeLeft--;
                    updateTimerDisplay();
                    setProgress((600 - timeLeft) / 600);

                    if (timeLeft <= 0) {
                        clearInterval(timer);
                        disableGame();
                    }
                }, 1000);
            }

            function updateTimerDisplay() {
                const minutes = Math.floor(timeLeft / 60);
                const seconds = timeLeft % 60;
                const timerText = document.querySelector("#timerText");
                timerText.textContent = `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;
            }

            function setProgress(percent) {
                const offset = circumference * percent; // Now the offset is proportional to the time left
                circle.style.strokeDashoffset = offset;

                // Change color based on percentage
                if (timeLeft <= 10) {
                    circle.style.stroke = '#f44336'; // Red for <= 10 seconds
                } else if (percent >= 0.5) {
                    circle.style.stroke = '#ffeb3b'; // Yellow for 25% to 50%
                } else {
                    circle.style.stroke = '#4caf50'; // Green for 0% to 25%
                }
            }

            function disableGame() {
                // Apply a grayscale filter to the entire document body
                document.body.style.filter = "grayscale(100%)";

                // Select all inputs, buttons, and textarea elements
                const inputs = document.querySelectorAll("input, button, textarea");

                inputs.forEach(input => {
                    if (input !== backButton) {
                        input.disabled = true; // Disable all inputs except the backButton
                        input.style.backgroundColor = "red"; // Turn the button background color to red
                    }
                });

                // Remove grayscale filter from the backButton
                backButton.style.filter = "none";
                backButton.style.backgroundColor = ""; // Optional: Reset any background color changes to the backButton

                showPopupMessage("Time's up! You can no longer answer the questions.");

                // Ensure backButton is enabled
                backButton.disabled = false;
            }
        }
            goButton.addEventListener("click", function () {
                if (!timerStarted) {
                    startTimer();
                    timerStarted = true;
                }
                // Hide idle and show attack animation
                const GRangerIdle = document.querySelector(".GRanger-idle");
                const GRangerAttack = document.querySelector(".GRanger-attack");

                GRangerIdle.style.visibility = "hidden";
                GRangerIdle.style.opacity = "0";

                GRangerAttack.style.visibility = "visible";
                GRangerAttack.style.opacity = "1";

                displayQuestion(); // Assuming this function displays the next question
            });

        function selectRandomQuestions() {
            const shuffledQuestions = questions.slice(0, -3).sort(() => Math.random() - 0.5);

            // Select the first 12 questions from the shuffled array
            const selectedQuestions = shuffledQuestions.slice(0, 12);

            // Add the last three questions back at the end
            return [...selectedQuestions, ...questions.slice(-3)];
        }

        const randomQuestions = selectRandomQuestions();

        function displayQuestion() {
            const currentQuestion = randomQuestions[currentQuestionIndex];
            const questionElement = questionContainer.querySelector("#question");
            const choicesContainer = questionContainer.querySelector("#choices");
            const imageContainer = questionContainer.querySelector("#imageContainer");
            const answerField = questionContainer.querySelector("#answer");
            const answerTextarea = questionContainer.querySelector("#answerTextarea");

            questionElement.textContent = currentQuestion.question;
            choicesContainer.innerHTML = ""; // Clear previous choices

            // Display image if available
            if (currentQuestion.image) {
                imageContainer.innerHTML = `<img src="${currentQuestion.image}" alt="Question Image">`;
            } else {
                imageContainer.innerHTML = ""; // Clear image container if no image
            }

            // Show or hide input fields based on the question type
            if (currentQuestion.type === 'fill_in_the_code' || currentQuestion.type === 'write_the_code') {
                answerField.classList.add("hidden");
                answerTextarea.classList.remove("hidden");
                answerTextarea.value = ""; // Reset text area
            } else {
                answerTextarea.classList.add("hidden");
                answerField.classList.remove("hidden");
                answerField.value = ""; // Reset input field
            }

            if (currentQuestion.choices) {
                currentQuestion.choices.forEach(choice => {
                    const choiceElement = document.createElement("div");
                    choiceElement.textContent = choice;
                    choicesContainer.appendChild(choiceElement);
                });
            }
            currentHintIndex = 0;
        }

        function updateCoinAndPointCount() {
            silverCount.textContent = silverCoins;
            goldCount.textContent = goldCoins;
            pointCount.textContent = points; // Update points display
            localStorage.setItem("silverCoins", silverCoins);
            localStorage.setItem("goldCoins", goldCoins);
            localStorage.setItem("points", points); // Store points
            localStorage.setItem("AW2F1totalScore", points); // Update total score in localStorage
        }

        function updateHearts() {
            heartsContainer.innerHTML = "";
            for (let i = 0; i < remainingAttempts; i++) {
                const heart = document.createElement("span");
                heart.className = "heart";
                heart.textContent = "❤️";
                heartsContainer.appendChild(heart);
            }
        }

        function showPopupMessage(message) {
            const popup = document.createElement("div");
            popup.className = "popup-message";
            popup.textContent = message;
            popupContainer.appendChild(popup);

            setTimeout(() => {
                popup.remove();
            }, 4000);
        }

        function fadeOutCharacter(characterElement) {
            let opacity = 1;
            const fadeEffect = setInterval(() => {
                if (opacity <= 0.1) {
                    clearInterval(fadeEffect);
                    characterElement.style.opacity = 0;
                    characterElement.classList.add('hidden');
                } else {
                    opacity -= 0.1;
                    characterElement.style.opacity = opacity;
                }
            }, 100);
        }

        function showLostPopup() {
            lostPopup.classList.remove("hidden");
        }

        function restartGame() {
            if (timeLeft > 0) { // Ensure the timer hasn't run out
                if (currentQuestionIndex === 14) {
                    lostPopup.classList.add("hidden");
                    currentQuestionIndex = 14; // Restart at question 14
                    goldCoins -= 20;
                    updateCoinAndPointCount();
                    showPopupMessage("You restarted the Boss' Level. 20 gold coins deducted.");
                    remainingAttempts = 3;
                    updateHearts();
                    displayQuestion();
                    gameContainer.classList.remove("hidden");
                    startSequence();
                } else {
                    console.log("Restart is only allowed at question 14.");
                }
            } else {
                console.log("Cannot restart the game after the timer has ended.");
            }
        }

        restartButton.addEventListener("click", restartGame);


            finishButton.addEventListener("click", function() {
                finishPopup.classList.remove("hidden");
            });

            confirmFinishButton.addEventListener("click", function() {
                window.location.href = '/Capstone/AW2P1Floor';
            });

            cancelFinishButton.addEventListener("click", function() {
                finishPopup.classList.add("hidden");
            });

            function checkAnswer() {
            console.log("checkAnswer() function called");

            // Determine the correct answer element based on question type
            const currentQuestion = randomQuestions[currentQuestionIndex];
            let answerElement;

            if (currentQuestion.type === 'fill_in_the_code' || currentQuestion.type === 'write_the_code') {
                answerElement = questionContainer.querySelector("#answerTextarea");
            } else {
                answerElement = questionContainer.querySelector("#answer");
            }

            if (!answerElement) {
                console.error("Answer element not found");
                return;
            }

            const answer = answerElement.value.trim().replace(/\s+/g, '').toLowerCase();

            if (answer === "") {
                showPopupMessage("Please put an answer");
                return;
            }

            const correctAnswer = currentQuestion.answer.trim().replace(/\s+/g, '').toLowerCase();
            const isChoiceQuestion = !!currentQuestion.choices;

            const answeredQuestions = JSON.parse(localStorage.getItem("answeredQuestions")) || [];

            if (answer === correctAnswer) {
                if (!answeredQuestions.includes(currentQuestionIndex)) {
                    answeredQuestions.push(currentQuestionIndex);
                }
                localStorage.setItem("answeredQuestions", JSON.stringify(answeredQuestions));

                silverCoins += 100;

                let pointsEarned = 0;
                if (isChoiceQuestion) {
                    pointsEarned = 2;
                } else if (currentQuestion.type === 'fill_in_the_code') {
                    pointsEarned = 5;
                } else if (currentQuestion.type === 'write_the_code') {
                    pointsEarned = 10;
                } else {
                    pointsEarned = 3;
                }

                points += pointsEarned;
                AW2F1totalScore = points;
                updateCoinAndPointCount();
                showPopupMessage(`Correct! You got ${pointsEarned} points and 100 silver coins`);
                gameContainer.classList.add("hidden");
                GRangerAttack.style.visibility = "hidden";
                GRangerAttack.style.opacity = "0";
                GRangerIdle.style.visibility = "visible";
                GRangerIdle.style.opacity = "1";


                if (currentQuestionIndex === 0) fadeOutCharacter(SlimeWalk0);
                else if (currentQuestionIndex === 1) fadeOutCharacter(SlimeWalk1);
                else if (currentQuestionIndex === 2) fadeOutCharacter(SlimeWalk2);
                else if (currentQuestionIndex === 3) fadeOutCharacter(SlimeWalk3);
                else if (currentQuestionIndex === 4) fadeOutCharacter(SlimeWalk4);
                else if (currentQuestionIndex === 5) fadeOutCharacter(SlimeWalk5);
                else if (currentQuestionIndex === 6) fadeOutCharacter(SlimeWalk6);
                else if (currentQuestionIndex === 7) fadeOutCharacter(SlimeWalk7);
                else if (currentQuestionIndex === 8) fadeOutCharacter(SlimeWalk8);
                else if (currentQuestionIndex === 9) fadeOutCharacter(SlimeWalk9);
                else if (currentQuestionIndex === 10) fadeOutCharacter(SlimeWalk10);
                else if (currentQuestionIndex === 11) fadeOutCharacter(SlimeWalk11);
                else if (currentQuestionIndex === 12) fadeOutCharacter(SlimeWalk12);
                else if (currentQuestionIndex === 13) fadeOutCharacter(SlimeWalk13);

                currentQuestionIndex++;
                remainingAttempts = 3;
                updateHearts();

                if (currentQuestionIndex < randomQuestions.length) {
                    goButton.classList.remove("hidden");
                } else {
                    goldCoins += 100;
                    updateCoinAndPointCount();
                    showPopupMessage("You got 100 gold coins for Completing this Floor!");

                    const answeredAllQuestions = JSON.stringify(answeredQuestions.sort()) === JSON.stringify(Array.from({ length: randomQuestions.length }, (_, i) => i).sort());
                    console.log("answeredAllQuestions: ", answeredAllQuestions);
                    if (answeredAllQuestions) localStorage.setItem("AW1Completed", "true");

                    saveTotalStats();
                    showCompletionWarning();
                    finishButton.classList.remove("hidden");
                }
            } else {
                remainingAttempts--;
                totalHeartsLost++;
                updateHearts();
                if (remainingAttempts > 0) {
                    showPopupMessage("Incorrect answer. Try again.");
                } else {
                    silverCoins -= 50;
                    updateCoinAndPointCount();
                    showPopupMessage("You lost all hearts. 50 silver coins deducted.");
                    gameContainer.classList.add("hidden");
                    GRangerAttack.style.visibility = "hidden";
                    GRangerAttack.style.opacity = "0";
                    GRangerIdle.style.visibility = "visible";
                    GRangerIdle.style.opacity = "1";


                    if (currentQuestionIndex === 0) fadeOutCharacter(SlimeWalk0);
                    else if (currentQuestionIndex === 1) fadeOutCharacter(SlimeWalk1);
                    else if (currentQuestionIndex === 2) fadeOutCharacter(SlimeWalk2);
                    else if (currentQuestionIndex === 3) fadeOutCharacter(SlimeWalk3);
                    else if (currentQuestionIndex === 4) fadeOutCharacter(SlimeWalk4);
                    else if (currentQuestionIndex === 5) fadeOutCharacter(SlimeWalk5);
                    else if (currentQuestionIndex === 6) fadeOutCharacter(SlimeWalk6);
                    else if (currentQuestionIndex === 7) fadeOutCharacter(SlimeWalk7);
                    else if (currentQuestionIndex === 8) fadeOutCharacter(SlimeWalk8);
                    else if (currentQuestionIndex === 9) fadeOutCharacter(SlimeWalk9);
                    else if (currentQuestionIndex === 10) fadeOutCharacter(SlimeWalk10);
                    else if (currentQuestionIndex === 11) fadeOutCharacter(SlimeWalk11);
                    else if (currentQuestionIndex === 12) fadeOutCharacter(SlimeWalk12);
                    else if (currentQuestionIndex === 13) fadeOutCharacter(SlimeWalk13);

                    if (currentQuestionIndex === 14) {
                        showLostPopup();
                        return; // Exit the function to avoid further execution
                    }

                    currentQuestionIndex++;
                    remainingAttempts = 3;
                    updateHearts();



                    if (currentQuestionIndex < randomQuestions.length) {
                        goButton.classList.remove("hidden");
                        GRangerAttack.style.visibility = "hidden";
                        GRangerAttack.style.opacity = "0";
                        GRangerIdle.style.visibility = "visible";
                        GRangerIdle.style.opacity = "1";

                    } else {
                        showCompletionWarning();
                        const answeredAllQuestions = JSON.stringify(answeredQuestions.sort()) === JSON.stringify(Array.from({ length: randomQuestions.length }, (_, i) => i).sort());
                        console.log("answeredAllQuestions: ", answeredAllQuestions);
                        if (answeredAllQuestions) localStorage.setItem("AW1Completed", "true");

                        finishButton.classList.remove("hidden");
                    }
                }
            }
            goButton.classList.add("hidden");
        }

            const startButtonClicked = new Array(randomQuestions.length).fill(false);

        function startSequence() {
            // Check if the start button has not been clicked for the current question index
            if (!startButtonClicked[currentQuestionIndex]) {
                startButtonClicked[currentQuestionIndex] = true; // Mark the start button as clicked for the current question index

                const GRangerWalk = document.querySelector('.GRanger-walk');
                const land = document.querySelector('.land');


                // Hide idle and show walk animation
                GRangerIdle.style.visibility = "hidden";
                GRangerIdle.style.opacity = "0";
                GRangerWalk.style.visibility = "visible";
                GRangerWalk.style.opacity = "1";
                GRangerWalk.classList.add('character-walk');
                land.classList.add('animate');

                // When the land animation ends, switch the walk back to idle
                land.addEventListener('animationend', function () {
                    land.classList.remove('animate');
                    GRangerWalk.style.visibility = "hidden";
                    GRangerWalk.style.opacity = "0";
                    GRangerIdle.style.visibility = "visible";
                    GRangerIdle.style.opacity = "1";

                    animateCharacters();
                }, { once: true });
            }
        }

            function animateCharacters() {
                if (currentQuestionIndex === 0) {
                    SlimeWalk0.classList.add("animateSlimeWalk0");
                    SlimeWalk0.addEventListener('animationend', function() {
                        SlimeWalk0.style.visibility = "visible";
                        SlimeWalk0.style.opacity = "1";
                        goButton.classList.remove("hidden");
                    }, { once: true });
                } else if (currentQuestionIndex === 1) {
                    SlimeWalk1.classList.add("animateSlimeWalk1");
                    SlimeWalk1.addEventListener('animationend', function() {
                        SlimeWalk1.style.visibility = "visible";
                        SlimeWalk1.style.opacity = "1";
                        goButton.classList.remove("hidden");
                    }, { once: true });
                } else if (currentQuestionIndex === 2) {
                    SlimeWalk2.classList.add("animateSlimeWalk2");
                    SlimeWalk2.addEventListener('animationend', function() {
                        SlimeWalk2.style.visibility = "visible";
                        SlimeWalk2.style.opacity = "1";
                        goButton.classList.remove("hidden");
                    }, { once: true });
                } else if (currentQuestionIndex === 3) {
                    SlimeWalk3.classList.add("animateSlimeWalk3");
                    SlimeWalk3.addEventListener('animationend', function() {
                        SlimeWalk3.style.visibility = "visible";
                        SlimeWalk3.style.opacity = "1";
                        goButton.classList.remove("hidden");
                    }, { once: true });
                } else if (currentQuestionIndex === 4) {
                    SlimeWalk4.classList.add("animateSlimeWalk4");
                    SlimeWalk4.addEventListener('animationend', function() {
                        SlimeWalk4.style.visibility = "visible";
                        SlimeWalk4.style.opacity = "1";
                        goButton.classList.remove("hidden");
                    }, { once: true });
                } else if (currentQuestionIndex === 5) {
                    SlimeWalk5.classList.add("animateSlimeWalk5");
                    SlimeWalk5.addEventListener('animationend', function() {
                        SlimeWalk5.style.visibility = "visible";
                        SlimeWalk5.style.opacity = "1";
                        goButton.classList.remove("hidden");
                    }, { once: true });
                } else if (currentQuestionIndex === 6) {
                    SlimeWalk6.classList.add("animateSlimeWalk6");
                    SlimeWalk6.addEventListener('animationend', function() {
                        SlimeWalk6.style.visibility = "visible";
                        SlimeWalk6.style.opacity = "1";
                        goButton.classList.remove("hidden");
                    }, { once: true });
                } else if (currentQuestionIndex === 7) {
                    SlimeWalk7.classList.add("animateSlimeWalk7");
                    SlimeWalk7.addEventListener('animationend', function() {
                        SlimeWalk7.style.visibility = "visible";
                        SlimeWalk7.style.opacity = "1";
                        goButton.classList.remove("hidden");
                    }, { once: true });
                } else if (currentQuestionIndex === 8) {
                    SlimeWalk8.classList.add("animateSlimeWalk8");
                    SlimeWalk8.addEventListener('animationend', function() {
                        SlimeWalk8.style.visibility = "visible";
                        SlimeWalk8.style.opacity = "1";
                        goButton.classList.remove("hidden");
                    }, { once: true });
                } else if (currentQuestionIndex === 9) {
                    SlimeWalk9.classList.add("animateSlimeWalk9");
                    SlimeWalk9.addEventListener('animationend', function() {
                        SlimeWalk9.style.visibility = "visible";
                        SlimeWalk9.style.opacity = "1";
                        goButton.classList.remove("hidden");
                    }, { once: true });
                } else if (currentQuestionIndex === 10) {
                    SlimeWalk10.classList.add("animateSlimeWalk10");
                    SlimeWalk10.addEventListener('animationend', function() {
                        SlimeWalk10.style.visibility = "visible";
                        SlimeWalk10.style.opacity = "1";
                        goButton.classList.remove("hidden");
                    }, { once: true });
                } else if (currentQuestionIndex === 11) {
                    SlimeWalk11.classList.add("animateSlimeWalk11");
                    SlimeWalk11.addEventListener('animationend', function() {
                        SlimeWalk11.style.visibility = "visible";
                        SlimeWalk11.style.opacity = "1";
                        goButton.classList.remove("hidden");
                    }, { once: true });
                } else if (currentQuestionIndex === 12) {
                    SlimeWalk12.classList.add("animateSlimeWalk12");
                    SlimeWalk12.addEventListener('animationend', function() {
                        SlimeWalk12.style.visibility = "visible";
                        SlimeWalk12.style.opacity = "1";
                        goButton.classList.remove("hidden");
                    }, { once: true });
                } else if (currentQuestionIndex === 13) {
                    SlimeWalk13.classList.add("animateSlimeWalk13");
                    SlimeWalk13.addEventListener('animationend', function() {
                        SlimeWalk13.style.visibility = "visible";
                        SlimeWalk13.style.opacity = "1";
                        goButton.classList.remove("hidden");
                    }, { once: true });
                }else if (currentQuestionIndex === 14) {
                    showWarningWithGlitters();
                }
            }

            function showWarningWithGlitters() {
                createGlitters();
                warningScreen.style.visibility = "visible";
                warningScreen.style.opacity = "1";
                setTimeout(function() {
                    warningScreen.style.visibility = "hidden";
                    warningScreen.style.opacity = "0";
                    IceQueenWalk.classList.add("animateWalk1");
                    IceQueenWalk.style.visibility = "visible";
                    IceQueenWalk.style.opacity = "1";

                    IceQueenWalk.addEventListener('animationend', function() {
                        console.log("Walk animation ended");
                        IceQueenWalk.style.visibility = "hidden";
                        IceQueenWalk.style.opacity = "0";
                        IceQueenIdle.classList.add("animateIdle1");
                        IceQueenIdle.style.visibility = "visible";
                        IceQueenIdle.style.opacity = "1";

                        IceQueenIdle.addEventListener('animationend', function() {
                            console.log("Idle animation ended");
                            IceQueenIdle.style.visibility = "hidden";
                            IceQueenIdle.style.opacity = "0";
                            IceQueenAttack.classList.add("animateAttack1");
                            IceQueenAttack.style.visibility = "visible";
                            IceQueenAttack.style.opacity = "1";

                            // Show the goButton after LavaPrinceIdle animation ends
                            goButton.classList.remove("hidden");
                        }, { once: true });
                    }, { once: true });
                }, 3000);
            }

            function createGlitters() {
                var glittersContainer = document.querySelector('.glitters');
                glittersContainer.innerHTML = ''; // Clear previous glitters
                for (var i = 0; i < 50; i++) {
                    var glitter = document.createElement('div');
                    glitter.classList.add('glitter');
                    glitter.style.top = Math.random() * 100 + '%';
                    glitter.style.left = Math.random() * 100 + '%';
                    glitter.style.animationDelay = Math.random() * 2 + 's';
                    glittersContainer.appendChild(glitter);
                }
            }

           function showCompletionWarning() {
            console.log("Showing completion message with glitter effect");
            createGlitters();

            AW2F1totalScore = localStorage.getItem("AW2F1totalScore") ? parseInt(localStorage.getItem("AW2F1totalScore")) : 0;

            // Display completion message
            completionWarning.style.visibility = "visible";
            completionWarning.style.opacity = "1";
            setTimeout(() => {
                completionWarning.style.visibility = "hidden";
                completionWarning.style.opacity = "0";
            }, 5000);
        }

            function showHint() {
                const currentQuestion = randomQuestions[currentQuestionIndex];
                if (currentHintIndex < currentQuestion.hints.length) {
                    if (currentHintIndex === 0) {
                        showPopupMessage(currentQuestion.hints[currentHintIndex]);
                        currentHintIndex++;
                    } else if (currentHintIndex > 0 && currentHintIndex < 3) {
                        if (silverCoins >= 100) {
                            silverCoins -= 100;
                            updateCoinAndPointCount();
                            showPopupMessage(currentQuestion.hints[currentHintIndex]);
                            currentHintIndex++;
                        } else {
                            showPopupMessage("Not enough silver coins for a hint.");
                        }
                    }
                } else {
                    showPopupMessage("No more hints available.");
                }
            }

            function saveTotalStats() {
                totalAttempts = totalHeartsLost; // Record the total attempts as hearts lost
                AW2F1totalScore = points; // Record the total score

                localStorage.setItem("totalAttempts", totalAttempts);
                localStorage.setItem("AW2F1totalScore", AW2F1totalScore);
            }

            startButton.addEventListener("click", function() {
                startSequence();
                bookModule.disabled = true;
            });

            goButton.addEventListener("click", function() {
                gameContainer.classList.remove("hidden");
                goButton.classList.add("hidden");
                displayQuestion();
            });

            backButton.addEventListener("click", function() {
                window.location.href = '/Capstone/AW2P1Floor';
            });

            submitAnswerButton.addEventListener("click", function() {
                checkAnswer();
            });

            hintButton.addEventListener("click", function() {
                showHint();
            });

        document.getElementById('bookModule').addEventListener('click', function(event) {
            console.log('bookModule button clicked');

            const slidingDiv = document.getElementById('slidingDiv');
            slidingDiv.classList.toggle('visible');
            slidingDiv.classList.toggle('hidden');

            const moduleContent = document.getElementById('moduleContent');
            const preloadIframe = document.getElementById('preloadIframe');
            moduleContent.innerHTML = ''; // Clear any existing content
            moduleContent.appendChild(preloadIframe); // Move the preloaded iframe to moduleContent
            preloadIframe.style.display = 'block'; // Make sure the iframe is visible
            console.log('Preloaded PDF iframe added to moduleContent');

            const windowWidth = window.innerWidth;
            const slidingDivWidth = slidingDiv.offsetWidth;
            const leftPosition = (windowWidth - slidingDivWidth) / 2;

            slidingDiv.style.left = leftPosition + 'px';
            slidingDiv.style.height = '90vh';

            event.stopPropagation(); // Prevent the click event from propagating to the document
        });

        document.addEventListener('click', function(event) {
            const slidingDiv = document.getElementById('slidingDiv');
            if (!slidingDiv.contains(event.target) && event.target.id !== 'bookModule') {
                slidingDiv.classList.add('hidden');
                slidingDiv.classList.remove('visible');
                const moduleContent = document.getElementById('moduleContent');
                const preloadIframe = document.getElementById('preloadIframe');
                // Move the iframe back to its hidden container to keep it preloaded
                preloadIframe.style.display = 'none';
                document.body.appendChild(preloadIframe);
                console.log('Sliding div hidden and moduleContent cleared');
            }
        });

        });
	</script>
</body>
</html>
